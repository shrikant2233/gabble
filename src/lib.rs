/*!
Generate random pronounceable words.

## Quickstart
Gabble provides some types (namely [`struct@Default`] and [`Length`]) that can be used to generate psuedo-words.
These types implement [`Distribution`](rand::distributions) trait which means words can be generated in an idomatic way.
### Example
``` rust
use gabble;
use rand::{thread_rng, Rng};
let rng = thread_rng();
let word: gabble::Default = rng.gen();
println!("{} might be answer to life", word);
let word: gabble::Length<14> = rng.gen()
println!("{} is a long word", word);
```

[`struct@Default`] and [`Length`] do not provide any constructor. They are obtained by using [`rng.gen()`](rand::Rng::gen()) and they simply deref to [`String`].

## Customization
Additionally there is also a [`Gabble`] type which can be used to generate psuedo-words with a bit more customization. You can tweak length, starting and ending syllable for now.
### Example
``` rust
use gabble;
use gabble::Symbol::{Consonant, Number};
use rand::thread_rng;
let rng = thread_rng();
let gabble = Gabble::new()
    .with_length(10);
    .start_with(Consonant)
    .end_with(Number{start: 10, end: 100});
println!("customized answer to life is {}", gabble.generate(rng));
```

These pseudo-words are generated by combining vowel and consonant syllables together. This crate is mostly inspired from python package called [gibberish](https://github.com/greghaskins/gibberish)

*/

mod generator;
mod gabble;
mod default;
// mod large;
// mod medium;
// mod small;
mod symbol;
mod length;

use symbol::{FINALS, INITIALS, VOWELS};
pub use symbol::Symbol;
pub use generator::generate;
// pub use large::Large;
// pub use medium::Medium;
// pub use small::Small;
pub use gabble::Gabble;
pub use default::Default;
pub use length::Length;